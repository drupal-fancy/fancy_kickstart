<?php
/**
 * @file
 * Install, update and uninstall functions for the Fancy Kickstart install profile.
 */

/**
 * Implements hook_install_tasks().
 */
function fancy_kickstart_install_tasks($install_state) {
  $tasks = array();

  $tasks['fancy_kickstart_set_themes'] = array(
    'type' => 'batch',
    'display' => FALSE,
    'run' => INSTALL_TASK_RUN_IF_REACHED,
   );

  $tasks['fancy_kickstart_revert_features'] = array(
    'type' => 'batch',
    'display' => FALSE,
    'run' => INSTALL_TASK_RUN_IF_REACHED,
  );

  $tasks['fancy_kickstart_configure_form'] = array(
    'type' => 'form',
    'display_name' => st('Configure features'),
  );

  $tasks['fancy_kickstart_install_additional_modules'] = array(
    'type' => 'batch',
    'display_name' => st('Install fancy modules'),
    'display' => FALSE,
    'run' => INSTALL_TASK_RUN_IF_REACHED,
  );

  return $tasks;
}

/**
 * Task callback for setting Responsive Bartik as default theme
 * and Shiny as admin theme.
 */
function fancy_kickstart_set_themes() {
  $enable = array(
    'theme_default' => 'responsive_bartik',
    'admin_theme' => 'shiny',
  );
  theme_enable($enable);

  foreach ($enable as $var => $theme) {
    variable_set($var, $theme);
  }

  theme_disable(array('bartik'));
}

/**
 * Task callback for reverting all features.
 */
function fancy_kickstart_revert_features() {
  if (module_exists('features')) {
    features_rebuild();
    features_revert();
  }
}

/**
 * Configuration task.
 */
function fancy_kickstart_configure_form() {
  $form = array('#tree' => TRUE);

  $form['config'] = array(
    '#type' => 'fieldset',
    '#title' => st('Configure features'),
  );

  $form['config']['import'] = array(
    '#type' => 'select',
    '#title' => st('Which type of content you want to import?'),
    '#description' => st('We prepared some demo content for lazy people.'),
    '#options' => array(
      'drupal' => st('Drupal'),
      'kittens' => st('Kittens'),
      'business' => st('Business'),
    ),
    '#empty_option' => st('- None -'),
  );

  $form['config']['content'] = array(
    '#type' => 'checkboxes',
    '#title' => st('Content elements'),
    '#description' => st('Select types of content which should be available when creating new content.'),
    '#options' => array(
      'fancy_content_image' => st('Image'),
      'fancy_content_headline' => st('Headline'),
      'fancy_content_map' => st('Map'),
      'fancy_content_wysiwyg' => st('Rich text (WYSIWYG enabled)'),
      'fancy_content_slider' => st('Slider'),
      'fancy_content_text' => st('Text'),
      'fancy_content_video' => st('Video'),
    ),
    '#empty_option' => st('- None - '),
  );

  $form['config']['functionalities'] = array(
    '#type' => 'checkboxes',
    '#title' => st('Additional functionalities'),
    '#description' => st('Do you need some other fancy stuff?'),
    '#options' => array(
      'fancy_grid' => st('Responsive website'),
      'metatag' => st('SEO optimized'),
    ),
    '#empty_option' => st('- None - '),
  );

  $form['actions'] = array('#type' => 'actions');

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Create and Finish'),
    '#weight' => 15,
  );

  return $form;
}

/**
 * Submit function for configuration form.
 */
function fancy_kickstart_configure_form_submit(&$form, &$form_state) {
  variable_set('fancy_kickstart_config', $form_state['values']['config']);
}

/**
 * Task callback for enable modules.
 */
function fancy_kickstart_install_additional_modules() {
  $config = variable_get('fancy_kickstart_config', array());
  $modules = $config['content'] + $config['functionalities'];
  $desired_modules = array();

  foreach ($modules as $module_name => $enabled) {
    if ($enabled) {
      $desired_modules[] = $module_name;
    }
  }

  module_enable($desired_modules);
}

/**
 * Implements hook_install().
 *
 * Performs actions to set up the site for this profile.
 *
 * @see system_install()
 */
function fancy_kickstart_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
      // Pathauto filter.
      'pathauto' => array(
        'weight' => 50,
        'status' => 1
      ),
    ),
  );

  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
      // Pathauto filter.
      'pathauto' => array(
        'weight' => 50,
        'status' => 1
      ),
    ),
  );

  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'responsive_bartik');
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Only administrators can create user accounts.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

   // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );

  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Module filter dynamic save button.
  variable_set('module_filter_dynamic_save_position', 1);

  // Pathauto patterns.
  variable_set('pathauto_node_pattern', '[node:title]');
  variable_set('pathauto_user_pattern', '');

  // Display Suite Field Template.
  variable_set('ds_extras_field_template', 1);
  variable_set('ft-default', 'theme_ds_field_reset');
}
